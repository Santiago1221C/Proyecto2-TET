version: '3.8'

services:
  # PostgreSQL Database for User Service
  postgres:
    image: postgres:16-alpine
    container_name: bookstore-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for Payment and Review Services
  mongodb:
    image: mongo:7.0
    container_name: bookstore-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb123
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - bookstore-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: bookstore-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: bookstore
      RABBITMQ_DEFAULT_PASS: bookstore123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - bookstore-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5

  # User Service (Java Spring Boot)
  user-service:
    build:
      context: ./microservices/user_service
      dockerfile: Dockerfile
    container_name: bookstore-user-service
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_URL: jdbc:postgresql://postgres:5432/userdb
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: bookstore-jwt-secret-key-change-in-production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bookstore-network
    restart: unless-stopped

  # Payment Service (Python Flask)
  payment-service:
    build:
      context: ./microservices/payment_service
      dockerfile: Dockerfile
    container_name: bookstore-payment-service
    environment:
      FLASK_ENV: development
      PORT: 5000
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: bookstore
      RABBITMQ_PASS: bookstore123
      MONGO_URI: mongodb://mongodb:mongodb123@mongodb:27017/
      MONGO_DB: payment_db
      JWT_SECRET: bookstore-jwt-secret-key-change-in-production
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bookstore-network
    restart: unless-stopped

  # Review Service (Python Flask)
  review-service:
    build:
      context: ./microservices/review_service
      dockerfile: Dockerfile
    container_name: bookstore-review-service
    environment:
      FLASK_ENV: development
      PORT: 5002
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: bookstore
      RABBITMQ_PASS: bookstore123
      MONGO_URI: mongodb://mongodb:mongodb123@mongodb:27017/
      MONGO_DB: review_db
      USER_SERVICE_URL: http://user-service:8080
      JWT_SECRET: bookstore-jwt-secret-key-change-in-production
    ports:
      - "5002:5002"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bookstore-network
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./microservices/frontend
      dockerfile: Dockerfile
    container_name: bookstore-frontend
    environment:
      VITE_API_BASE_URL: http://localhost
    ports:
      - "80:80"
    depends_on:
      - user-service
      - payment-service
      - review-service
    networks:
      - bookstore-network
    restart: unless-stopped

networks:
  bookstore-network:
    driver: bridge

volumes:
  postgres-data:
  mongodb-data:
  rabbitmq-data:



