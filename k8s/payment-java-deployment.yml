apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service-java
  namespace: bookstore
  labels:
    app: payment-service-java
    version: v1
    component: payment
    language: java
spec:
  replicas: 2  # Mínimo 2 réplicas para alta disponibilidad
  selector:
    matchLabels:
      app: payment-service-java
  template:
    metadata:
      labels:
        app: payment-service-java
        version: v1
        component: payment
        language: java
    spec:
      containers:
      - name: payment-service-java
        image: <ECR-REPO>/payment-service-java:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: SERVER_PORT
          value: "8080"
        - name: SPRING_APPLICATION_NAME
          value: "payment-service-java"
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_PORT
        - name: RABBITMQ_USER
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_USER
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: RABBITMQ_PASS
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-service:5432/payment_db"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: POSTGRES_PASSWORD
        - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
          value: "http://eureka-server:8761/eureka/"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      # Configuración de anti-afinidad para distribuir réplicas en diferentes nodos
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - payment-service-java
              topologyKey: kubernetes.io/hostname
      # Configuración de tolerancia para fallos temporales
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service-java
  namespace: bookstore
  labels:
    app: payment-service-java
    component: payment
    language: java
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: payment-service-java
  # Configuración de sesión para balanceo de carga
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: payment-service-java-hpa
  namespace: bookstore
  labels:
    app: payment-service-java
    component: payment
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: payment-service-java
  minReplicas: 2  # Mínimo 2 réplicas para alta disponibilidad
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Configuración de escalado
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

