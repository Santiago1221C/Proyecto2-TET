apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: bookstore
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 2  # Mínimo 2 réplicas para alta disponibilidad
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
          name: http
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      # Configuración de anti-afinidad
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - prometheus
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: bookstore
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: http
  selector:
    app: prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: bookstore
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: bookstore
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'bookstore-cluster'
        replica: '${POD_NAME}'
    
    rule_files:
      - "alert_rules.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
    
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
    
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
    
      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
    
      # Gateway Service
      - job_name: 'gateway-service'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: gateway-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /actuator/prometheus
        scrape_interval: 15s
    
      # Payment Service Python
      - job_name: 'payment-service-python'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: payment-service-python
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /api/metrics
        scrape_interval: 15s
    
      # Payment Service Java
      - job_name: 'payment-service-java'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: payment-service-java
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /actuator/prometheus
        scrape_interval: 15s
    
      # User Service
      - job_name: 'user-service'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: user-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /actuator/prometheus
        scrape_interval: 15s
    
      # Review Service
      - job_name: 'review-service'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: review-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /api/metrics
        scrape_interval: 15s
    
      # PostgreSQL
      - job_name: 'postgres'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: postgres-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: postgres
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        scrape_interval: 30s
    
      # MongoDB
      - job_name: 'mongodb'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: mongodb-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: mongodb
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        scrape_interval: 30s
    
      # RabbitMQ
      - job_name: 'rabbitmq'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - bookstore
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: rabbitmq-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: management
          - source_labels: [__meta_kubernetes_endpoint_address_ready]
            action: keep
            regex: true
        metrics_path: /metrics
        scrape_interval: 30s
  
  alert_rules.yml: |
    groups:
    - name: bookstore.rules
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"
      
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }} seconds"
      
      - alert: ServiceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Service is down"
          description: "Service {{ $labels.job }} is down"
      
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is {{ $value }}% for {{ $labels.pod }}"
      
      - alert: HighCPUUsage
        expr: (rate(container_cpu_usage_seconds_total[5m]) / container_spec_cpu_quota * container_spec_cpu_period) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is {{ $value }}% for {{ $labels.pod }}"

