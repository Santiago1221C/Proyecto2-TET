apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service-python
  namespace: bookstore
  labels:
    app: payment-service-python
    version: v1
    component: payment
    language: python
spec:
  replicas: 2  # Mínimo 2 réplicas para alta disponibilidad
  selector:
    matchLabels:
      app: payment-service-python
  template:
    metadata:
      labels:
        app: payment-service-python
        version: v1
        component: payment
        language: python
    spec:
      containers:
      - name: payment-service-python
        image: <ECR-REPO>/payment-service-python:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: FLASK_ENV
          value: "production"
        - name: PORT
          value: "5000"
        - name: SERVICE_NAME
          value: "payment-service-python"
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_PORT
        - name: RABBITMQ_USER
          valueFrom:
            configMapKeyRef:
              name: bookstore-config
              key: RABBITMQ_USER
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: RABBITMQ_PASS
        - name: MONGO_URI
          value: "mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@mongodb-service:27017/"
        - name: MONGO_USER
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: MONGO_USER
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: MONGO_PASSWORD
        - name: MONGO_DB
          value: "payment_db"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: bookstore-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health/ready
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
      # Configuración de anti-afinidad para distribuir réplicas en diferentes nodos
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - payment-service-python
              topologyKey: kubernetes.io/hostname
      # Configuración de tolerancia para fallos temporales
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service-python
  namespace: bookstore
  labels:
    app: payment-service-python
    component: payment
    language: python
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: payment-service-python
  # Configuración de sesión para balanceo de carga
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: payment-service-python-hpa
  namespace: bookstore
  labels:
    app: payment-service-python
    component: payment
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: payment-service-python
  minReplicas: 2  # Mínimo 2 réplicas para alta disponibilidad
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Configuración de escalado
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
